<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog">
		<item value="true" key="isRegEx"/>
		<item value="Stop" key="selection"/>
		<item value="false" key="casesensitive"/>
		<item value="false" key="incremental"/>
		<item value="true" key="wrap"/>
		<item value="false" key="wholeword"/>
		<list key="findhistory">
			<item value="stop"/>
			<item value="stio"/>
			<item value="ge ishida\.cw;\R\Rimport ishida\.RcuAppType;\Rimport ishida\.RcuLanguage;\Rimport ishida\.RcuAppletChgEvent;\Rimport ishida\.utilities\.\*;\R\Rimport java\.awt\.\*;\Rimport java\.text\.\*;\Rimport java\.lang\.Math;\Rimport java\.awt\.event\.\*;\Rimport java\.awt\.image\.\*;\Rimport java\.awt\.geom\.\*;\Rimport java\.util\.\*;\R\Rimport espial\.awt\.\*;\Rimport espial\.awt\.borders\.\*;\Rimport espial\.image\.\*;\Rimport espial\.util\.\*;\R\R/\*\*\R\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\R デバイスチェックパネルクラス&lt;BR&gt;\R&lt;/FONT&gt;&lt;/PRE&gt;\R\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\R\*/\Rpublic class DeviceCheckPanel extends LightAppType implements ReserveStaticVal\{\R\R\t//=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#\R\t//#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=\R\t//                                定数の定義                            ##\R\t//#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=\R\t//=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#\R\R\t//----------------- MemLink 書き込み用のシーケンス番号\R\tfinal static int WORD_LEN\t\t\t\t= 1;\t// 書き込みワード数\R\R\t/\*\* メモリチェック開始要求書き込み用シーケンス番号 \*/\R\tfinal static int MEM_CHECK_RUN\t\t\t= 0;\R\t/\*\* ポートＩＤ書き込み用シーケンス番号 \*/\R\tfinal static int PORT_ID\t\t\t\t= 1;\R\R\t/\*\* メモリチェック状態読み出し用シーケンス番号 \*/\R\tfinal static int MEM_CHECK_STATUS\t\t= 2;\R\t/\*\* メモリチェック結果読み出し用シーケンス番号 \*/\R\tfinal static int MEM_CHECK_RESULT\t\t= 3;\R\t/\*\* ネットワークマップ（Ｄメモリ）読み出し用シーケンス番号 \*/\R\tfinal static int NET_MAP_D\t\t\t\t= 4;\R\t/\*\* ネットワークマップ（Ｒメモリ）読み出し用シーケンス番号 \*/\R\tfinal static int NET_MAP_R\t\t\t\t= 5;\R\t/\*\* ポート番号 読み出し用シーケンス番号 by Hiroe 2010\.09\.10 \*/\R\tfinal static int PORT_ID_D\t\t\t\t= 6;\R\R\R\t//=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#\R\t//#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=\R\t//                                変数の定義                            ##\R\t//#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=\R\t//=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#\R\tprivate Dimension sizeD = new Dimension\(FRAM_SIZE_X, RUNNING_MAIN_HI\);// この画面のサイズ\R\tstatic AppImageContext appc = null;\R\R\t// 現在の国コードに応じたフォント\R\tprivate static Font NowFont;\R\R\t//---画面パーツ---\R\tprivate EPanel pPanel;\R\R\tprivate static DeviceCheckPanel instance = null;\R\R\t/\*\*\R\t\*\t本クラスに入ってきたときの国コード\R\t\*/\R\tprivate static int countryCode = 0;\R\R\t/\*\* 選択されたラジオボタン位置 \*/\R\tpublic int    iTestItem=0;\t// 0:メモリ  1:通信　2:液晶\R\R\tprivate IRadioButton btnMemory;\t\t// メモリチェック\R\tprivate IRadioButton btnComm;\t\t// 通信チェック\R\tprivate IRadioButton btnLCD;\t\t// 液晶チェック\R\tprivate IButtonGroup bg;\t\t\t// ボタングループ\R\R\t// 各種ボタンのリスナー定義\R\tprivate IButton2 btnDispose;\R\tprivate IButtonMouseListener btnDsp = new IButtonMouseListener\(\)\{\R\t\t\t\t\t\t\t\t\t\t\t\tpublic void mousePressed\(MouseEvent e\) \{\R\t\t\t\t\t\t\t\t\t\t\t\t\tbtnDispose_actionPerformed\(e\);\R\t\t\t\t\t\t\t\t\t\t\t\t\}\R\t\t\t\t\t\t\t\t\t\t\t\};\R\R\tprivate static IButton2 btnAction;\t\t// 「実行」ボタン（総合診断のためgetInstance\(\)で参照）\R\tprivate IButtonMouseListener btnAct = new IButtonMouseListener\(\)\{\R\t\t\t\t\t\t\t\t\t\t\t\tpublic void mousePressed\(MouseEvent e\) \{\R\t\t\t\t\t\t\t\t\t\t\t\t\tbtnAction_actionPerformed\(e\);\R\t\t\t\t\t\t\t\t\t\t\t\t\}\R\t\t\t\t\t\t\t\t\t\t\t\};\R\tprivate\tELabel FrmNamelabel1;\R\tprivate\tELabel FrmNamelabel21;\R\tprivate\tIMultiLabel FrmNamelabel22;\R\tprivate ILabelsInfo lblInfo2;\R\R\tprivate\tIMultiLabel msglabel21;\R\tprivate\tELabel msglabel23;\R\tprivate\tELabel msglabel24;\R//\tprivate IMultiLabel pnlMsg;\R\tprivate ILabelsInfo lblInfo;\R\t\t\t\t\t\t\t\t\t\t\t// MlnkFrmDatのテーブル \*/\R\tprivate MlnkFrmDat mlnkObj_\[\] = new MlnkFrmDat\[2\];\R\tprivate MlnkFrmDat mlnkMemSts_ ;\R\tprivate MlnkFrmDat mlnkMemRslt_ ;\R\tprivate MlnkFrmDat mlnkMapD_ ;\R\tprivate MlnkFrmDat mlnkMapR_ ;\R\tprivate MlnkFrmDat\tmlnkMapIDObj_;\t\t// Hiroe 2010\.09\.10\R\tprivate boolean bChkPortFlg=true;\t\t// 初期ﾈｯﾄﾜｰｸﾏｯﾌﾟ作成か？\R\R\tprivate int iOldRunState;\t\t\t\t// 前回実行中状態\R\tprivate long iMemCheck;\t\t\t\t\t// メモリチェック結果\R\tprivate int iMemCheck_L;\t\t\t\t// メモリチェック結果 下位１６ｂｉｔ by Hiroe 2012\.11\.15\R\tprivate int iMemCheck_H;\t\t\t\t// メモリチェック結果 上位１６ｂｉｔ by Hiroe 2012\.11\.15\R\R\tprivate int iPortID;\t\t\t\t\t\t// ポートＩＤ\R\tprivate int iDMU_map\[\] = new int\[16\];\t// 通信チェック結果\R\tprivate int iICU_map\[\] = new int\[16\];\t// 通信チェック結果\R\tprivate int iWCU_map\[\] = new int\[16\];\t// 通信チェック結果\R\tprivate int iMAP_set\[\] = new int\[16\];\t// 通信チェック結果\R\R\tprivate static String sErrDetail\[\] = \{new String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0001&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0002&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0004&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0008&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0010&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0020&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0040&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0080&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0100&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0200&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0400&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE0800&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE1000&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE2000&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE4000&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE8000&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE10000&quot;\)\),\t// ADD by Hiroe 2012\.11\.15\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE20000&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE40000&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE80000&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE100000&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE200000&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE400000&quot;\)\),\R\t\t\t\t\t\t\t\t\t\tnew String\(RcuLanguage\.rcuLangGetString\(&quot;CW_MEM_ERR_CODE800000&quot;\)\),\R\t\};\R\R\tprivate static EContainer content_;\R\R\tprivate static boolean bTotalFlg_;\t\t\t\t// 総合診断実行要求フラグ\R\R\tprivate int nowLevel;\t\t\t\t\t\t\t// 操作レベル &apos;04/02/23 ROOT M\.Tanaka Added\.\R\R\R/\*\*\*\*\* FOR DEBUG \*\*\*\*\*/\R\tprivate static int iDebugCnt;\R\tprivate static int iTestNo;\R/\*\*\*\*\* FOR DEBUG \*\*\*\*\*/\R\R\R\t//=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#\R\t//#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=\R\t//                                メソッド                              ##\R\t//#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=\R\t//=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#\R\t/\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\R\t\*コンストラクタ。\R\t\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*/\R\tprivate DeviceCheckPanel\(\) \{\R\t\tmakeMlkFrame\(\);\t\t\t// MemLink用フレーム作成\R\t\}\R\R\t/\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\R\t\tインスタンス取得。\R\t\tすでに存在すれば、以前のものを返す。\R\t\t@return このクラスのインスタンス\R\t\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*/\t\R\tstatic public DeviceCheckPanel getInstance\(EContainer content\)\{\R\t\tif\( instance == null \)\{\R\t\t\tinstance  = new DeviceCheckPanel\(\);\R\t\t\tcountryCode = RcuLanguage\.getCountryCode\(\);\t\t// 現在の国コードを取得して保存しておく\R\t\t\tcontent_ = content;\R\t\t\tSystem\.out\.println\(&quot;DCPanel getI start\. content_= &quot;\+ content_ \+ &quot; instance= &quot;\+ instance\);\R\t\t\}else\{\R\t\t\t// 前に入ってきたときと国コードが異なれば国コードに依存するラベルのみ更新する\R\t\t\tif\(countryCode != RcuLanguage\.getCountryCode\(\)\)\{\R\t\t\t\tchngLang\(\);\R\t\t\t\}\R\t\t\}\R\t\tbTotalFlg_ =SelfCheckMain\.bTotalFlg;\R\t\tSystem\.out\.println\(&quot;&gt;&gt; DCPanel getI bTotalFlg_= &quot;\+ bTotalFlg_\);\R\t\tif \(bTotalFlg_\) \{\t\t\t\t// 診断実行要求中？\R\t\t\tbtnAction\.startFlash\(\);\t\t// フラッシュさせる\R\t\t\}\R\R// /\*\*\*\*\* FOR DEBUG \*\*\*\*\*/\R//\tiTestNo = 0;\R// /\*\*\*\*\* FOR DEBUG \*\*\*\*\*/\R\R\t\treturn instance;\R\t\}\R\R\t/\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\R\t\tＭｅｍｌｉｎｋとの通信用フレーム作成。\R\t\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*/\R\tprivate void makeMlkFrame\(\)\{\R\t\tif\(mlnkObj_\[MEM_CHECK_RUN\] != null\)\t\t// すでにあれば作らない\R\t\t\treturn;\R\R\t\t// メモリチェック開始要求書き込み用\(R260\)\R\t\tmlnkObj_\[MEM_CHECK_RUN\] = new MlnkFrmDat\(MEM_CHECK_RUN, MlnkFrmMker\.TYPE_I, \R\t\t\t\t\t\t\t\t\t\t\t\tCwPlcifAddr\.getAddr\(&quot;CW_ADOW_MEM_CHECK&quot;\), 1\);\R\R\t\t// ポートＩＤ書き込み用\(R1352\)\R\t\tmlnkObj_\[PORT_ID\] = new MlnkFrmDat\(PORT_ID, MlnkFrmMker\.TYPE_I, \R\t\t\t\t\t\t\t\t\t\t\t\tCwPlcifAddr\.getAddr\(&quot;CW_ADOW_PORT_ID&quot;\), 1\);\R\R\R\t\t// メモリチェック状態読み出しフレームの設定\(R260\)\R\t\tmlnkMemSts_ = new MlnkFrmDat\(MEM_CHECK_STATUS , MlnkFrmMker\.TYPE_I, \R\t\t\t\t\t\t\t\t\t\t\t\tCwPlcifAddr\.getAddr\(&quot;CW_ADOW_MEM_CHECK&quot;\), WORD_LEN\);\R\t\tmlnkMemSts_\.addRcvListener\(new ishida\.utilities\.MlnkEventListener\(\)\{\R\t\t\t\t\t\t\t\t\t\t\t\tpublic void memlnkRcvPerformed\(String rRcvMsg\)\{\R\t\t\t\t\t\t\t\t\t\t\t\t\trcvMemoryCheckStatusReadRet\( rRcvMsg \);\R\t\t\t\t\t\t\t\t\t\t\t\t\}\R\t\t\t\t\t\t\t\t\t\t\t\}\);\R\R\t\t// メモリチェック結果読み出しフレームの設定\(D2756\)\R\t\tmlnkMemRslt_ = new MlnkFrmDat\(MEM_CHECK_RESULT , MlnkFrmMker\.TYPE_I, \R\t\t\t\t\t\t\t\t\t\t\t\tCwPlcifAddr\.getAddr\(&quot;CW_ADIW_MEM_CHECK&quot;\), 9\);\t// by Hiroe 2012\.11\.15 \+D2764\R\t\tmlnkMemRslt_\.addRcvListener\(new ishida\.utilities\.MlnkEventListener\(\)\{\R\t\t\t\t\t\t\t\t\t\t\t\tpublic void memlnkRcvPerformed\(String rRcvMsg\)\{\R\t\t\t\t\t\t\t\t\t\t\t\t\trcvMemoryCheckResultReadRet\( rRcvMsg \);\R\t\t\t\t\t\t\t\t\t\t\t\t\}\R\t\t\t\t\t\t\t\t\t\t\t\}\);\R\R\t\t// ネットワークマップ（Ｄメモリ）読み出しフレームの設定\(D2604 ～ D2619\)\R\t\tmlnkMapD_ = new MlnkFrmDat\(NET_MAP_D , MlnkFrmMker\.TYPE_I, \R\t\t\t\t\t\t\t\t\t\t\t\tCwPlcifAddr\.getAddr\(&quot;CW_ADIW_NETWORK_MAP&quot;\), 16\);\R\t\tmlnkMapD_\.addRcvListener\(new ishida\.utilities\.MlnkEventListener\(\)\{\R\t\t\t\t\t\t\t\t\t\t\t\tpublic void memlnkRcvPerformed\(String rRcvMsg\)\{\R\t\t\t\t\t\t\t\t\t\t\t\t\trcvNetworkMapDReadRet\( rRcvMsg \);\R\t\t\t\t\t\t\t\t\t\t\t\t\}\R\t\t\t\t\t\t\t\t\t\t\t\}\);\R\R\t\t// ネットワークマップ（Ｒメモリ）読み出しフレームの設定\(R1369 ～ R1384\)\R\t\tmlnkMapR_ = new MlnkFrmDat\(NET_MAP_R , MlnkFrmMker\.TYPE_I, \R\t\t\t\t\t\t\t\t\t\t\t\tCwPlcifAddr\.getAddr\(&quot;CW_ADOW_MAP_DUC_LOW&quot;\), 16\);\R\t\tmlnkMapR_\.addRcvListener\(new ishida\.utilities\.MlnkEventListener\(\)\{\R\t\t\t\t\t\t\t\t\t\t\t\tpublic void memlnkRcvPerformed\(String rRcvMsg\)\{\R\t\t\t\t\t\t\t\t\t\t\t\t\trcvNetworkMapRReadRet\( rRcvMsg \);\R\t\t\t\t\t\t\t\t\t\t\t\t\}\R\t\t\t\t\t\t\t\t\t\t\t\}\);\R\R\t\t// ネットワークマップID 読み出し書き込み用\(D2602\)\t// by Hiroe 2010\.09\.10\R\t\tmlnkMapIDObj_ = new MlnkFrmDat\(PORT_ID_D , MlnkFrmMker\.TYPE_I, CwPlcifAddr\.getAddr\(&quot;CW_ADIW_NETWORK_PORT_ID&quot;\), 1\);\R\t\tmlnkMapIDObj_\.addRcvListener\(new ishida\.utilities\.MlnkEventListener\(\) \{ \R\t\t\t\t\t\t\t\t\t\t\t\tpublic void memlnkRcvPerformed\(String rRcvMsg\)\{\R\t\t    \t\t\t\t\t\t\t\t\t\trcvNetworkPortIDReadRet\( rRcvMsg \);\t\t//  ネットワークマップポート番号の判断に使用\R\t\t\t\t\t\t\t\t\t\t\t\t\}\R\t\t\t\t\t\t\t\t\t\t\t\}\);\R\t\}\R\R\t/\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\R\t\*アプレットの初期化。\R\t\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*/\R\tpublic void init\(\) \{\R\t\ttry \{\R\t\t\tjbInit\(\);\R\t\t\}\R\t\tcatch\(Exception e\) \{\R\t\t\te\.printStackTrace\(\);\R\t\t\}\R\t\}\R\R\t/\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\R\t\*コンポーネントの初期化。\R\t\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*/\R\tprivate void jbInit\(\) throws Exception \{\R\t\tint\t\ti;\R\R\t\tthis\.appc = new AppImageContext\(\);\R\t\t// ImageUtils\.assignTrackingComponent\(this\);\R\R\t\t// 現在の国コードに応じたフォントを取得\R\t\tNowFont = RcuLanguage\.rcuLangGetFont\(\);\R\t\tthis\.setLayout\(null\);\R//\t\tthis\.setBackground\(CwStatic\.BASE_GRAY_COLOR\);\R\t\tthis\.setBackground\(Color\.lightGray\);\R\R\t\t//------------------------------------------------------------- メインフレーム\R\t\tpPanel = new EPanel\(\);\R\t\tpPanel\.setBounds\(new Rectangle\(0, 0, sizeD\.width, sizeD\.height\)\);\R\t\tpPanel\.setLayout\(null\);\R\t\tSystem\.out\.println\(&quot;&gt; jbInit START pPanel= &quot;\+ pPanel\);\R\R\t\t// ラジオボタン\R\t\tbtnMemory = new IRadioButton\(RcuLanguage\.rcuLangGetString\(&quot;CW_DEV_CHECK_BTN1&quot;\), null, new Rectangle\(37, 87, 300, 26\)\);\R\t\tbtnMemory\.setActionCommand\(&quot;MEM&quot;\);\R\t\tbtnMemory\.setToolTip\(RcuLanguage\.rcuLangGetString\(&quot;CW_TIP_MANCHK_DEVICE_MEM&quot;\), IToolTip\.BOTTOM\);\R\R\t\tbtnComm = new IRadioButton\(RcuLanguage\.rcuLangGetString\(&quot;CW_DEV_CHECK_BTN2&quot;\), null, new Rectangle\(37, 134, 300, 26\)\);\R\t\tbtnComm\.setActionCommand\(&quot;COM&quot;\);\R\t\tbtnComm\.setToolTip\(RcuLanguage\.rcuLangGetString\(&quot;CW_TIP_MANCHK_DEVICE_NET&quot;\), IToolTip\.BOTTOM\);\R\R\t\tbtnLCD = new IRadioButton\(RcuLanguage\.rcuLangGetString\(&quot;CW_DEV_CHECK_BTN3&quot;\), null, new Rectangle\(37, 180, 300, 26\)\);\R\t\tbtnLCD\.setActionCommand\(&quot;LCD&quot;\);\R\t\tbtnLCD\.setToolTip\(RcuLanguage\.rcuLangGetString\(&quot;CW_TIP_MANCHK_DEVICE_DSP&quot;\), IToolTip\.BOTTOM\);\R\R\t\t//---ボタングループに登録する---\R\t\tbg = new IButtonGroup\(\);\R\t\tbg\.add\(btnMemory\);\R\t\tbg\.add\(btnComm\);\R\t\tbg\.add\(btnLCD\);\R\R\t\t//---ボタングループのリスナーを取得する---\R\t\tbg\.addIItemListener\(\R\t\t\tnew IItemListener\(\)\{\R\t\t\t\tpublic void itemSelected\(AbstractIButton obj, boolean flag\)\{\R\t\t\t\t\tif\(flag\)\{\R\t\t\t\t\t\tif\(obj == btnMemory &amp;&amp; iTestItem != 0\)\{\t\t// メモリチェックを選択\R\t\t\t\t\t\t\tiTestItem = 0;\R\t\t\t\t\t\t\tSystem\.out\.println\(&quot;MEM= &quot; \+ iTestItem\);\R\t\t\t\t\t\t\}else if\(obj == btnComm &amp;&amp; iTestItem != 1\)\{\t// 通信チェックを選択\R\t\t\t\t\t\t\tiTestItem = 1;\R\t\t\t\t\t\t\tSystem\.out\.println\(&quot;COM= &quot; \+ iTestItem\);\R\t\t\t\t\t\t\}else if\(obj == btnLCD &amp;&amp; iTestItem != 2\)\{\t// 液晶チェックを選択\R\t\t\t\t\t\t\tiTestItem = 2;\R\t\t\t\t\t\t\tSystem\.out\.println\(&quot;LCD= &quot; \+ iTestItem\);\R\t\t\t\t\t\t\}else\{\t\t// 同じ物が選択\R\t\t\t\t\t\t\tSystem\.out\.println\(&quot;Same btn= &quot; \+ iTestItem\);\R\t\t\t\t\t\t\treturn;\R\t\t\t\t\t\t\}\R\t\t\t\t\t\tlblInfo\.setMessageVLine\(&quot; &quot;, false, new Rectangle\(0, 0, 350, 50\), 12, NowFont\);\R//\t\t\t\t\t\tmsglabel21\.setLabel\(&quot; &quot;\);\R//\t\t\t\t\t\tmsglabel22\.setLabel\(&quot; &quot;\);\R\t\t\t\t\t\tmsglabel23\.setLabel\(&quot; &quot;\);\R\t\t\t\t\t\tmsglabel24\.setLabel\(&quot; &quot;\);\R\t\t\t\t\t\tmsglabel21\.repaint\(\);\R//\t\t\t\t\t\tmsglabel22\.repaint\(\);\R\t\t\t\t\t\tmsglabel23\.repaint\(\);\R\t\t\t\t\t\tmsglabel24\.repaint\(\);\R\t\t\t\t\t\tbtnDispose\.setEnabledIButton\(false\);\t// 「対処」ボタングレイアウトしておく\R\t\t\t\t\t\tFrmNamelabel22\.setVisible\(false\);\t\t// 対処メッセージは表示しない\R\t\t\t\t\t\}\R\t\t\t\t\}\R\t\t\t\}\R\t\t\);\R\t\tbg\.setSelected\(btnMemory, true\);\t// 始めはメモリチェックが選択されている\R\R\t\tpPanel\.add\(btnMemory, null\);\R\t\tpPanel\.add\(btnComm, null\);\R\t\tpPanel\.add\(btnLCD, null\);\R\R\t\t// \$\$\$↓↓操作レベルによる「通信チェック」ボタン入力制限処理追加 &apos;04/02/23 ROOT M\.Tanaka Added\.\R\t\t// 【参考】下記の操作レベルのラベルは、ReserveStaticVal\.java で定義されている。\R\t\t//  final static int OPERATE_LVL = CwAccessLevel\.CW_ACC_LVL_1;\t// 作業レベル\t\t\t値：１\R\t\t//  final static int MANAGE_LVL  = CwAccessLevel\.CW_ACC_LVL_2;\t// 管理レベル\t\t\t値：２\R\t\t//  final static int ADJUST_LVL  = CwAccessLevel\.CW_ACC_LVL_3;\t// 設置調整レベル\t\t値：３\R\t\t//  final static int SERVICE_LVL = CwAccessLevel\.CW_ACC_LVL_4;\t// 保守サービスレベル\t値：４\R\t\t//  final static int PLAN_LVL    = CwAccessLevel\.CW_ACC_LVL_MTN;// 設計レベル　\t\t\t注）何故か値は６\R\R\t\tnowLevel = \(CwAccessLevel\.getInstance\(\)\)\.getAccessLevel\(\);\t\t// 操作レベル取得\R\t\tSystem\.out\.println\(&quot; nowLevel= &quot; \+ nowLevel\);\R\R//\t\t↓この判定だと、設計レベルでも表示されなかった！！\R// \t\tif\(nowLevel &lt; PLAN_LVL\)\{\t\t// 設計レベルでない場合「ネットワークアナライズ画面」Tab非表示\R \t\tif\(nowLevel &lt;= SERVICE_LVL\)\{\t// 設計保守サービスレベルかそれ以下のとき「通信チェック」ボタン無効化（非表示）\R\t\t\tbtnComm\.setEnabledIButton\(false\);\R\t\t\} else \{\R\t\t\tbtnComm\.setEnabledIButton\(true\);\R\t\t\}\R\t\t// \$\$\$↑↑操作レベルによる「通信チェック」ボタン入力制限処理追加 &apos;04/02/23 ROOT M\.Tanaka Added\.\R\R\t\t\R\t\t\R\t\tbtnLCD\.setEnabledIButton\(false\);\t\t// LCDボタン未完成の為、無効化  2004\.7\.16  M\.Y\R\t\t\R\t\t\R\t\t\R\t\t// 対処ボタン\R\t\tImageBundle KeyImg1 = appc\.getImageBundledResource\(getClass\(\), &quot;images/common/key91_71\.gif&quot;\);\R\t\tImageBundle imgDispoIcon = appc\.getImageBundledResource\(getClass\(\), &quot;images/common/icon_AmbulanceCar_59x27_Self-diagnosis\.gif&quot;\);\R\t\tELabel DspnameLbl = new ELabel\(&quot;&quot;\);\R\t\tDspnameLbl\.setBounds\(new Rectangle\(682, 218, 91, 71\)\);\R\t\tbtnDispose = new IButton2\(RcuLanguage\.rcuLangGetString\(&quot;CW_DEV_CHECK_BTN5&quot;\), &quot;&quot;, KeyImg1, imgDispoIcon,\R\t\t\t\t\t\t\t\t\t new Rectangle\(682, 218, 91, 71\)\);\R\t\tbtnDispose\.setLocationLbltop\(0,22\);\R\t\tbtnDispose\.setLocationImg1\(0,-10\);\R\t\tbtnDispose\.setFont\(RcuLanguage\.rcuLangGetFont\(15\)\);\R\t\tbtnDispose\.addMouseListener\(btnDsp\);\R\t\tbtnDispose\.setEnabledIButton\(false\);\t// 画面表示時はグレイアウトしておく\R\t\tDspnameLbl\.addMouseListener\(btnDsp\);\R\t\tbtnDispose\.setToolTip\(RcuLanguage\.rcuLangGetString\(&quot;CW_TIP_MANCHK_DEVICE_NETINF&quot;\), IToolTip\.LEFT\);\R\t\tpPanel\.add\(btnDispose, null\);\R\R\t\t// 実行ボタン\R\t\tImageBundle KeyImg2    = appc\.getImageBundledResource\(getClass\(\), &quot;images/common/key91_52\.gif&quot;\);\R\t\tImageBundle imgActIcon = appc\.getImageBundledResource\(getClass\(\), &quot;images/common/start\.gif&quot;\);\R\t\tImageBundle flashImg   = appc\.getImageBundledResource\(getClass\(\), &quot;images/common/AnimKeyFrame91x52\.gif&quot;\);\R\t\tELabel ActnameLbl = new ELabel\(&quot;&quot;\);\R\t\tActnameLbl\.setBounds\(new Rectangle\(158, 237, 91, 52\)\);\R\t\tbtnAction = new IButton2\(RcuLanguage\.rcuLangGetString\(&quot;C"/>
			<item value="Memlink"/>
			<item value="readMemlink"/>
			<item value="head/"/>
			<item value="head"/>
			<item value="MemLink"/>
			<item value="new"/>
			<item value="PIO"/>
			<item value="pnlScreen\[.\]\.m"/>
			<item value="pnlScreen\[.\]\."/>
			<item value="pnlScreen\[.\]"/>
			<item value="pnlScreen\[*"/>
			<item value="pnlScreen\[*\]"/>
		</list>
		<list key="replacehistory">
		</list>
	</section>
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog_dialogBounds">
		<item value="377" key="DIALOG_WIDTH"/>
		<item value="1|メイリオ|9.0|0|WINDOWS|1|-12|0|0|0|400|0|0|0|1|0|0|0|0|メイリオ" key="DIALOG_FONT_NAME"/>
		<item value="578" key="DIALOG_HEIGHT"/>
		<item value="693" key="DIALOG_X_ORIGIN"/>
		<item value="510" key="DIALOG_Y_ORIGIN"/>
	</section>
</section>
