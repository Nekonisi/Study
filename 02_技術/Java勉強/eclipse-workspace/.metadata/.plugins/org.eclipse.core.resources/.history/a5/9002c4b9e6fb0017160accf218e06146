package ishida.ips;

import ishida.RcuMainType;
import ishida.RcuAppType;
import ishida.RcuLanguage;
import ishida.RcuAccessLevel;

import ishida.utilities.*;

import java.awt.*;
import java.awt.event.*;
import java.text.MessageFormat;
import java.text.DecimalFormat;
import java.util.StringTokenizer;

import espial.awt.*;
import espial.awt.borders.*;
import espial.image.*;

/************************************
<PRE><FONT size="normal">
 日新金検用 メイン画面。
 ITPSホーム画面の金属検出器タブの画面

</FONT></PRE>
*************************************/
public class IpsMetal_nissin extends EPanel implements IpsConstStatus,MlnkEventListener,NumEventListener,IReleasable{


	//---Memlink シーケンス番号---

	private final static int SEQ_R1110_PRESETNO  		= 1;	// 予約番号
	private final static int SEQ_R1111_METALCHECK_MODE  = 2;	// 金検動作モード
	private final static int SEQ_D2300_ALL_COUNT 		= 3;	// 全数
	private final static int SEQ_D2301_METALCHECK_COUNT = 4;	// 金検回数
	private final static int SEQ_D2302_GRAPH_VALUE 		= 5;	// バーグラフ値
	private final static int SEQ_D2303_GRAPH_PEEKRESIDUAL=6;	// バーグラフ値（ピーク残留値）
	private final static int SEQ_D1051_METALCHECK_TYPE  = 7;	// 金属検出機タイプ
	private final static int SEQ_R1011_MACSELECT		= 8;	// 機物設定

	//---NumInput のリスナーID---
	private static final int NUM_RESERVE	= 1;

	//---ボタンの識別---
	private static final int BTN_RESERV	= 1;	// 予約設定
	private static final int BTN_MANUAL	= 10+0;	// 金属検出手動
	private static final int BTN_LOG	= 10+1;	// 来歴
	private static final int BTN_CH		= 10+2;	// 機物選択

	//---ラベルの識別---
	private static final int LBL_DRVMODE  = 0;	// 金検動作
	private static final int BTN_TOTALCNT = 1;	// 全数
	private static final int BTN_METALCNT = 2;	// 金検回数


	//--- 状態保存用変数
	private int m_PresetNo;		// 現在の金検予約番号
	private int m_Machine;		// 機物選択



	//--- 画面具材 ---
	private int RESERV_NO_MIN = 1;		// 予約番号最小
	private int RESERV_NO_MAX = 200;	// 予約番号最大

	private final static int SET_BTN1_WI = 91;
	private final static int SET_BTN1_HI = 71;

	private AppImageContext m_Appc = new AppImageContext();


	private EPanel m_PnlUpper;  // 本画面上側のパネル
	private EPanel m_PnlPrdImg; // 予約番号表示用
	private ELabel m_LblPrdImg;
	private EPanel m_PnlPrdImgLsn; // 予約番号クリックリスナ用
	private NumInput m_numIn;	// テンキー入力
	private IButton2 m_upPanlBtns[] = new IButton2[1];
	private EPanel m_grpPnl; // グラフ用パネル
	private metalGrpLbl m_Graph;	// グラフ
	private ELabel m_upLabel[] = new ELabel[3];



	private EPanel m_PnlLower;  // 本画面下側のパネル
	private IButton2 m_lowPanlBtn[] = new IButton2[3];


	// 金検動作モードの表示文字列の文字列辞書キー
	//   金検動作モードの値と同じ並びとする事
	private String m_dickey_MetalCheckModeString[] = {
		"IPS_TEXT_HOME_4_STR_METAL_DRVMODE_ADDING",		// 金属混入を検出する by Hiroe 2016.05.19 初期値を検出にする為入れ替え
		"IPS_TEXT_HOME_4_STR_METAL_DRVMODE_NONE",		// しない             by Hiroe 2016.05.19 初期値を検出にする為入れ替え
		"IPS_TEXT_HOME_4_STR_METAL_DRVMODE_SHORTAGE"	// 金属欠品を検出する
	};


	// Mlnkフレームパーサ
	private MlnkFrmMker m_rMlnkFrmer = new MlnkFrmMker();

	// MemlinkIOスレッドと、当該スレッド排他用オブジェクト
	private boolean m_bIsStop=false;
	IpsShared m_share = null;



	/******************************
	 コンストラクタ
	*******************************/
	public IpsMetal_nissin(){
		
		// MemlinkIOスレッドと、当該スレッド排他用オブジェクト初期化
		m_share = new IpsShared ();
		m_bIsStop=false;

		m_PresetNo = RESERV_NO_MIN;
		m_Machine = 0;

		//---メインパネルの作成---
		createMyView();

		//---Memlink読み込み---
		readMemlink();

	}

	//---------------------------
	//----メインパネルの作成
	//---------------------------
	private void createMyView(){
		// 自身のView初期化
		setLayout(null);
		setBounds(0, 0, 800, 480);

		createUpperPanel();
		add(m_PnlUpper);

		createLowerPanel();
		add(m_PnlLower);

	}

	//---------------------------
	//----画面上のパネル作成
	//---------------------------
	private void createUpperPanel(){
	
		Rectangle rect;

		m_PnlUpper = new EPanel();
		m_PnlUpper.setLayout(null);
		m_PnlUpper.setBounds(0, 0, 800, this.getHeight()/2);
		m_PnlUpper.setBorder( new BevelBorder());


		// グラフパネル
		m_grpPnl = new EPanel();
		m_grpPnl.setLayout(null);
		m_grpPnl.setBounds(49, 20, 602, 40);
		
		Rectangle grapRect = new Rectangle(1,5,600,30);

		// グラフ窪みよう
		EPanel grpPnlBebel = new EPanel();
		grpPnlBebel.setBorder( new BevelBorder( false ) );
		grpPnlBebel.setLayout(null);
		grpPnlBebel.setBounds(grapRect);
		m_grpPnl.add(grpPnlBebel);

		// グラフ
		m_Graph = new metalGrpLbl("", grapRect, Color.yellow);
		m_Graph.setVal(0);

		m_grpPnl.add(m_Graph);

		// 真ん中縦線
		IpsColorLbl lblCenter = new IpsColorLbl("", new Rectangle(300,0,3,40), Color.red);
		m_grpPnl.add(lblCenter);

		m_PnlUpper.add(m_grpPnl);


		// ラベル
		String strLbl[] = {
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_STR_METAL_DRV_MODE"),	// 金検動作
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_STR_METAL_TOTAL_NUM"),// 全数
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_STR_METAL_METAL_NUM")	// 金検回数
		};

		for(int i=0;i< strLbl.length; i++){
			rect = new Rectangle(60, 70, 150, 35);
			rect.y = rect.y + ( i * 45 );

			// 見出し
			ELabel lbl = new ELabel(strLbl[i]);
			lbl.setFont(new Font(RcuLanguage.getDefaultFontName(), Font.PLAIN, 12));
			lbl.setJustification(ELabel.HLEFT | ELabel.VMIDDLE);
			lbl.setBounds(rect.x,rect.y,rect.width,rect.height);
			m_PnlUpper.add(lbl);

			// カンマ
			ELabel lbl2 = new ELabel(" : ");
			lbl2.setJustification(ELabel.HCENTER | ELabel.VMIDDLE);
			lbl2.setFont(new Font(RcuLanguage.getDefaultFontName(), Font.PLAIN, 12));
			rect.x = rect.x + rect.width +5;
			rect.width = 20;
			lbl2.setBounds(rect.x,rect.y,rect.width,rect.height);
			m_PnlUpper.add(lbl2);

			// 値
			m_upLabel[i] = new ELabel();
			m_upLabel[i].setJustification(ELabel.HRIGHT | ELabel.VMIDDLE);
			m_upLabel[i].setFont(new Font(RcuLanguage.getDefaultFontName(), Font.PLAIN, 23));
			rect.x = rect.x + rect.width +5;
			rect.width = 300;
			m_upLabel[i].setBounds(rect.x,rect.y,rect.width,rect.height);
			m_PnlUpper.add(m_upLabel[i]);
		}

		// 右端 ボタン群
		rect = new Rectangle(800-103, 0, 103, 126);

		//---商品画像---
		ImageBundle imgPrdImgBG = m_Appc.getImageBundledResource(getClass(), "images/frame_product_image_bg_101x124_IPS_HOME_1_1.gif");
		m_PnlPrdImg = new EPanel();
		m_PnlPrdImg.setLayout(null);
		m_PnlPrdImg.setBounds(rect.x, rect.y, rect.width, rect.height);
		m_PnlPrdImg.setBorder(new LineBorder(imgPrdImgBG.getImage()));
		
		m_LblPrdImg = new ELabel();
		m_LblPrdImg.setLocation(1, 1);
		m_LblPrdImg.setSize(rect.width-2, rect.height-2);

		m_PnlPrdImg.add(m_LblPrdImg);
		
		m_PnlPrdImgLsn = new EPanel();
		m_PnlPrdImgLsn.setBounds(m_PnlPrdImg.getBounds());
		m_PnlPrdImgLsn.addMouseListener(
			new MouseAdapter(){
				public void mousePressed(MouseEvent e){
					if( WinGPIO.canUse ){
						WinGPIO.rcuKeyClickBeep();
						IIdlingInfo.clearIdleTime();
					}
					startNumInput();  // テンキー表示
				}
			}
		);
		// by Hiroe 2016.05.17 CCWの予約設定と連動するので、操作不可にする
		//m_PnlPrdImgLsn.setVisible(false);
		m_PnlUpper.add(m_PnlPrdImgLsn);
		m_PnlUpper.add(m_PnlPrdImg);
		

		// ボタン群設定
		// 予約設定ボタン
		ImageBundle imgIcon;
		ImageBundle imgBtnPrd[] = { 
			m_Appc.getImageBundledResource(getClass(), "images/bgButton_r.gif")
		};

		String strImgPath[] = {
			"icoProdSet_69x37.gif"
		};

		String strBtn[] = {
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_KEY_PRESET")	// 予約設定
		};

		String strTip[] = {
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_KEY_PRESET")
		};

		Rectangle rectBtn[] = {
			new Rectangle(800-SET_BTN1_WI-5 , 130, SET_BTN1_WI, SET_BTN1_HI)
		};

		int iBtnID[] = {
			BTN_RESERV
		};

		int imgW = 0, imgH = 0;
		for(int i=0;i< m_upPanlBtns.length; i++){
			
			// ボタン
			if( strImgPath[i].equals("") ){
				imgIcon = null;
			}else{
				imgIcon = m_Appc.getImageBundledResource(getClass(), "images/" + strImgPath[i]);
				imgW = imgIcon.getImage().getWidth(this);
				imgH = imgIcon.getImage().getHeight(this);
			}
			//---ボタン作成、イメージ、文字の位置調整---
			m_upPanlBtns[i] = new IButton2( "", strBtn[i], imgBtnPrd[i], imgIcon, rectBtn[i]);
			m_upPanlBtns[i].setBounds(rectBtn[i]);
			m_upPanlBtns[i].setForeground(Color.black);
			m_upPanlBtns[i].setLocationText1(0, 20);
			m_upPanlBtns[i].setLocationLbltop(0, -6);
			if( imgIcon != null ){
				m_upPanlBtns[i].setJustificationTop((ELabel.HLEFT | ELabel.VTOP));
				m_upPanlBtns[i].setLocationImg1( (rectBtn[i].width-imgW)/2, 5);
			}
			m_upPanlBtns[i].setActionCommand(String.valueOf(iBtnID[i]));
			m_upPanlBtns[i].setToolTip(strTip[i], IToolTip.BOTTOM);
			
			//---イベントセット---
			m_upPanlBtns[i].addMouseListener(
				new MouseAdapter(){
					public void mousePressed(MouseEvent e){
						btns_actionPerformed(e);
					}
				}
			);
			if(iBtnID[i] == BTN_RESERV ) {
				if (RcuAccessLevel.getInstance(RcuMainType.getNowPackage()).getAccessLevel() >= RcuAccessLevel.RCUACC_LVL_2) {
					m_upPanlBtns[i].setVisible(true);
				}else{
					m_upPanlBtns[i].setVisible(false);
				}
			}

			m_PnlUpper.add(m_upPanlBtns[i]);

		}


	}

	//---------------------------
	//----画面下のパネル作成
	//---------------------------
	private void createLowerPanel(){
		
		m_PnlLower = new EPanel(); 
		m_PnlLower.setLayout(null);
		m_PnlLower.setBounds(0, this.getHeight()/2, 800, this.getHeight()/2);
//		m_PnlLower.setBorder( new BevelBorder());


		// ボタン群設定
		ImageBundle imgIcon;
		ImageBundle imgBtnPrd = m_Appc.getImageBundledResource(getClass(), "images/bgButton_r.gif");

		String strImgPath[] = {
			"icon_icon_mset_69x39.gif",
			"",
			""
		};

		String strBtn[] = {
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_KEY_METAL_MANUAL"),	// 金属検出手動
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_KEY_LOG"),			// 来歴
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_KEY_MACHINE")			// 機物選択
		};

		String strTip[] = {
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_KEY_METAL_MANUAL"),	// 金属検出手動
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_KEY_LOG"),			// 来歴
			RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_KEY_MACHINE")			// 機物選択
		};

		Rectangle rectBtn[] = {
			new Rectangle(800-SET_BTN1_WI-5 , 30, SET_BTN1_WI, SET_BTN1_HI),
			new Rectangle(800-SET_BTN1_WI-5 , 30+SET_BTN1_HI+10, SET_BTN1_WI, SET_BTN1_HI),
			new Rectangle(                5 , 30+SET_BTN1_HI+10, SET_BTN1_WI, SET_BTN1_HI)
		};

		int iBtnID[] = {
			BTN_MANUAL,	// 金属検出手動
			BTN_LOG,	// 来歴
			BTN_CH		// 機物選択
		};

		int imgW = 0, imgH = 0;
		for(int i=0;i< m_lowPanlBtn.length; i++){
			
			// ボタン
			if( strImgPath[i].equals("") ){
				imgIcon = null;
			}else{
				imgIcon = m_Appc.getImageBundledResource(getClass(), "images/" + strImgPath[i]);
				imgW = imgIcon.getImage().getWidth(this);
				imgH = imgIcon.getImage().getHeight(this);
			}
			//---ボタン作成、イメージ、文字の位置調整---
			m_lowPanlBtn[i] = new IButton2("", strBtn[i], imgBtnPrd, imgIcon, rectBtn[i]);
			m_lowPanlBtn[i].setBounds(rectBtn[i]);
			m_lowPanlBtn[i].setForeground(Color.blue);
			m_lowPanlBtn[i].setLocationText1(0, 20);
			m_lowPanlBtn[i].setLocationLbltop(0, -6);
			if( imgIcon != null ){
				m_lowPanlBtn[i].setJustificationTop((ELabel.HLEFT | ELabel.VTOP));
				m_lowPanlBtn[i].setLocationImg1( (rectBtn[i].width-imgW)/2, 5);
			}
			m_lowPanlBtn[i].setActionCommand(String.valueOf(iBtnID[i]));
			m_lowPanlBtn[i].setToolTip(strTip[i], IToolTip.BOTTOM);
			
			//---イベントセット---
			m_lowPanlBtn[i].addMouseListener(
				new MouseAdapter(){
					public void mousePressed(MouseEvent e){
						btns_actionPerformed(e);
					}
				}
			);

			if(iBtnID[i] == BTN_CH ) { // 機物選択は最初は非表示
				m_lowPanlBtn[i].setVisibleIButton(false);
			}

			if(iBtnID[i] == BTN_MANUAL ) { // 機物選択は最初は非表示
				if (RcuAccessLevel.getInstance(RcuMainType.getNowPackage()).getAccessLevel() >= RcuAccessLevel.RCUACC_LVL_2) {
					m_lowPanlBtn[i].setVisibleIButton(true);
				}else{
					m_lowPanlBtn[i].setVisibleIButton(false);
				}
			}

			m_PnlLower.add(m_lowPanlBtn[i]);

		}

	}

	/*************************************
	カメラ画像番号受信時処理。
	@param dat Ｍｅｍｌｉｎｋにより取得したデータ
	@return 表示文字列
	**************************************/	
	private void rcvCameraNoReadRet(int cameraNo){

		Image img;
//		boolean bIsSclFlg = false;
//
//		ICameraPhotoDic.configPhotoData();
//		if(cameraNo == ICameraPhotoDic.PHOTO_ID_IMAGE){
//			if(ICameraPhotoDic.isCaptureImage(presetNo)){
//				img = ICameraPhotoDic.getScaleProductImg(m_Appc, presetNo, m_LblPrdImg.getWidth(), m_LblPrdImg.getHeight());
//				bIsSclFlg =false;
//			}else{
//				img = ICameraPhotoDic.getScaleProductImg(m_Appc, presetNo, ICameraPhotoDic.PHOTO_ID_FILM, m_LblPrdImg.getWidth(), m_LblPrdImg.getHeight());
//				bIsSclFlg =true;
//			}
//		}else{
//			img = ICameraPhotoDic.getScaleProductImg(m_Appc, presetNo, cameraNo,m_LblPrdImg.getWidth(), m_LblPrdImg.getHeight());
//			bIsSclFlg =true;
//		}
//		if(bIsSclFlg){
//			img = ICameraPhotoDic.getScaleImg( m_Appc, img, m_LblPrdImg.getWidth(), m_LblPrdImg.getHeight());
//		}

		img = ICameraPhotoDic.getScaleProductImg(m_Appc, cameraNo, ICameraPhotoDic.PHOTO_ID_NUMBER_IMAGE, m_LblPrdImg.getWidth()-2, m_LblPrdImg.getHeight()-2);
		img = ICameraPhotoDic.getScaleImg( m_Appc, img, m_LblPrdImg.getWidth(), m_LblPrdImg.getHeight());

		m_LblPrdImg.setImageBundle(new ImageBundle(img));
		m_LblPrdImg.repaint();
	}



	//-------------------------
	//---ボタン押下処理
	//-------------------------
	private void btns_actionPerformed(MouseEvent e) {
		IButton2 btn = (IButton2)e.getSource();
		int no = Integer.parseInt(btn.getActionCommand());

		switch(no){
			case BTN_RESERV:	// 予約設定
				IpsHome.notClearMetalEmuration( true ); // 画面遷移時金検エミュレーションモードをクリアしない
				new AppTools().getRcumainObj().rcu_actionPerformed(null, new IpsPresetMetal(), true, true);
				break;

			case BTN_MANUAL:	// 金属検出手動
				IpsHome.notClearMetalEmuration( true ); // 画面遷移時金検エミュレーションモードをクリアしない
				new AppTools().getRcumainObj().rcu_actionPerformed(null, new IpsSetupMetal(), true, true);
				break;

			case BTN_LOG:		// 来歴
				IpsHome.notClearMetalEmuration( true ); // 画面遷移時金検エミュレーションモードをクリアしない
				new AppTools().getRcumainObj().rcu_actionPerformed(null, new IpsReportMetal(), true, true);
				break;

			case BTN_CH:		// 機物選択
				switch(m_Machine){
					case 1: // C1
						//---選択チャネル変更---
System.out.println(" ##### Write Metal Channel 2");
						IpsCommonFunction.writeMemlink(99, "I", "IPS_ADOW_METAL_CH", RcuMainType.PKG_IPS, 1, "1", this);
						break;
					case 2: // C2
						//---選択チャネル変更---
System.out.println(" ##### Write Metal Channel 1");
						IpsCommonFunction.writeMemlink(99, "I", "IPS_ADOW_METAL_CH", RcuMainType.PKG_IPS, 1, "0", this);
						break;
					default:
						// noting to do
						break;
				}
		}

	}

	//-------------------------
	//---Memlink読み込み
	//-------------------------
	private void readMemlink(){

		// 予約番号
		IpsCommonFunction.readChgMemlink(SEQ_R1110_PRESETNO, "I", "IPS_ADOW_METAL_PRE_NO", RcuMainType.PKG_IPS, 1, this);

		// 金検動作モード
		IpsCommonFunction.readChgMemlink(SEQ_R1111_METALCHECK_MODE, "I", "IPS_ADOW_METAL_DRV_MODE", RcuMainType.PKG_IPS, 1, this);

		// 全数
		IpsCommonFunction.readChgMemlink(SEQ_D2300_ALL_COUNT, "I", "IPS_ADIW_METAL_TOTAL_NUM", RcuMainType.PKG_IPS, 1, this);

		// 金検回数
		IpsCommonFunction.readChgMemlink(SEQ_D2301_METALCHECK_COUNT, "I", "IPS_ADIW_METAL_METAL_NUM", RcuMainType.PKG_IPS, 1, this);

		// バーグラフ値
		IpsCommonFunction.readChgMemlink(SEQ_D2302_GRAPH_VALUE, "I", "IPS_ADIW_METAL_SENS_VAL",RcuMainType.PKG_IPS, 1, this);

		// バーグラフ値（ピーク残留値）
		IpsCommonFunction.readChgMemlink(SEQ_D2303_GRAPH_PEEKRESIDUAL, "I", "IPS_ADIW_METAL_SENS_PEAK", RcuMainType.PKG_IPS, 1, this);

		// 金属検出機タイプ
		IpsCommonFunction.readChgMemlink(SEQ_D1051_METALCHECK_TYPE, "I", "IPS_ADIW_METAL_METAL_TYPE", RcuMainType.PKG_IPS, 1, this);

		// 機物選択（Ch1かCh2）
		IpsCommonFunction.readChgMemlink(SEQ_R1011_MACSELECT, "I", "IPS_ADOW_METAL_CH", RcuMainType.PKG_IPS, 1, this);
	}


	/*******************************************
		Memlink イベント Override
	********************************************/
	public void memlnkRcvPerformed( String www ){

		String res_ch = m_rMlnkFrmer.rGetRcvFrmCommand(www);

		/* データ */
		String recvS = m_rMlnkFrmer.rGetRcvFrmReadDat(www);
		
		/* シーケンス番号 */
		int no = Integer.parseInt( m_rMlnkFrmer.rGetRcvFrmSeq(www) );
		
		/* データ変換用の変数 */
		int iValue = 0;
		double dWk;
		String strWk;

		try {
			m_share.waitSem();
		}catch (Exception e) {
			e.printStackTrace();
		}

		if(m_bIsStop){
	        m_share.releaseSem();
			return;
		}

		if(res_ch.compareTo("WRRS") == 0){
		}else{
			/* 読み込み応答または変化監視読み込み応答の場合 */
			switch(no){
				case SEQ_R1110_PRESETNO:			// 予約番号
					iValue = Integer.parseInt(recvS);
					if(iValue >= RESERV_NO_MIN && iValue <= RESERV_NO_MAX) {
						//--- 予約番号イメージセット
						m_PresetNo = iValue;
						rcvCameraNoReadRet(iValue);
					}
					break;

				case SEQ_R1111_METALCHECK_MODE:		// 金検動作モード
					iValue = Integer.parseInt(recvS);
					if( iValue>=0 && iValue<=m_dickey_MetalCheckModeString.length) {
						// 表示
						m_upLabel[LBL_DRVMODE].setLabel( RcuLanguage.rcuLangGetString(m_dickey_MetalCheckModeString[iValue]));
						m_upLabel[LBL_DRVMODE].repaint();
					}
					break;

				case SEQ_D2300_ALL_COUNT:			// 全数
					iValue = Integer.parseInt(recvS);
					// 表示
					m_upLabel[BTN_TOTALCNT].setLabel( String.valueOf(iValue) );
					m_upLabel[BTN_TOTALCNT].repaint();
					break;

				case SEQ_D2301_METALCHECK_COUNT:	// 金検回数
					iValue = Integer.parseInt(recvS);
					// 表示
					m_upLabel[BTN_METALCNT].setLabel( String.valueOf(iValue) );
					m_upLabel[BTN_METALCNT].repaint();
					break;

				case SEQ_D2302_GRAPH_VALUE:			// バーグラフ値
					iValue = Integer.parseInt(recvS);
					m_Graph.setVal(iValue);
					m_grpPnl.validate ();
					m_grpPnl.repaint();
					break;

				case SEQ_R1011_MACSELECT:	// 機物選択
					iValue = Integer.parseInt(recvS);

System.out.println(" ##### Read Metal Channel "+iValue);
					switch(iValue){
						case 0: // 非表示
							m_Machine = iValue;
							m_lowPanlBtn[BTN_CH-10].setVisibleIButton(false);
							break;
						case 1: // C1
							m_Machine = iValue;
							m_lowPanlBtn[BTN_CH-10].setLabel(RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_KEY_MACHINE_C1"));
							m_lowPanlBtn[BTN_CH-10].setVisibleIButton(true);
							m_lowPanlBtn[BTN_CH-10].repaint();
							break;
						case 2: // C2
							m_Machine = iValue;
							m_lowPanlBtn[BTN_CH-10].setLabel(RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_KEY_MACHINE_C2"));
							m_lowPanlBtn[BTN_CH-10].setVisibleIButton(true);
							m_lowPanlBtn[BTN_CH-10].repaint();
							break;
					}
					break;

				case SEQ_D2303_GRAPH_PEEKRESIDUAL:	// バーグラフ値（ピーク残留値）
				default:
			}
		}
        m_share.releaseSem();
	}


	//----------------------
	//---テンキー表示-------
	//----------------------
	private void startNumInput(){
		if( m_numIn == null ){
			m_numIn = new NumInput(RcuAppType.rcuFrame);
		}
		m_numIn.win_title(RcuLanguage.rcuLangGetString("IPS_TEXT_HOME_4_STR_PRESET") );
		m_numIn.NumAddReportAction(this, NUM_RESERVE);
		
		InputData input = new InputData( String.valueOf(m_PresetNo), 3, 0, RESERV_NO_MIN, RESERV_NO_MAX);
		m_numIn.num_kb_show(input);
	}

	/************************
		テンキーのリスナー
	*************************/
	public void numInputPerformed(int id, InputData input){
		int iVal = 0;
		String sValue = "", wkVal = "";

		if( id == -1 ){
			m_numIn.setVisible(false);
			return;
		}

		//---データチェック---
		input.chkInputData();
		int iErr = input.getErrorCode();
		if(iErr >= InputData.ELV_WARNING){
			//---警告エラーレベルなら、メッセージ表示----
			m_numIn.dispErrMsg(input.getErrorCode());
			return;
		}

		//---入力データの取得----
		String val = input.getResultData();

		//--正常時--
		m_numIn.setVisible(false);
		if( id == NUM_RESERVE ){

			iVal = Integer.parseInt(val);

			//---予約番号変更---
			IpsCommonFunction.writeMemlink(99, "I", "IPS_ADOW_METAL_PRE_NO", RcuMainType.PKG_IPS, 1, String.valueOf(iVal), this);
		}
	}


	/************************
		解放メソッド Override
	*************************/
	public void free(){

		m_bIsStop = true;
		try {
			m_share.waitSem();
		}catch (Exception e) {
			e.printStackTrace();
		}

		if(m_Appc != null) {
			m_Appc.dispose();
			m_Appc = null;
		}

		IpsCommonFunction.freeMemlink(this);
        m_share.releaseSem();

		if( m_numIn != null ){
			m_numIn.free();
			m_numIn = null;
		}
	}


	private class metalGrpLbl extends IpsColorLbl{
		private double dUnit = 1.0; // 値１のピクセル数
		private int    iNowVal = 1;
		
		public metalGrpLbl(String str, Rectangle rect, Color cl){
			super(str, rect,cl);

		}

		/******************************
		  このグラフの値を変更する。
			@param 値（単位は分）
		*******************************/
		public void setVal( int ival ){
			iNowVal = ival;
			double dWk = iNowVal;
			dWk = (dWk*dUnit)+0.5;
			setWi( (int)dWk);
		}


		/******************************
		  このグラフの値１に対するピクセル数を変更する。
			@param 値（単位 値１に対するピクセル数）
		*******************************/
		public void setUnit( double iuni ){
			dUnit = iuni;
			double dWk = iNowVal;
			dWk = (dWk*dUnit)+0.5;
			setWi( (int)dWk);
		}

		/******************************
		  開始位置を変更する。
			@param X位置（ピクセル数）
		*******************************/
		public void setStart( int ival ){
			myRect.x = ival;
			setLocation(myRect.x,myRect.y);
			lbl.setLocation(0,0);
			lbl.setSize(myRect.getSize());
		}

		/******************************
		  開始位置を変更する。
			@param X位置（ピクセル数）
		*******************************/
		public int getStart(){
			return myRect.x;
		}

		/******************************
		  開始位置を変更する。
			@param X位置（ピクセル数）
		*******************************/
		public int getEnd(){
			return myRect.x+myRect.width;
		}

		/******************************
		  自身の幅をセットする。
			@param 幅（ピクセル数）
		*******************************/
		public void setWi( int iVal){
			myRect.width = iVal;
			setBounds(myRect);
			lbl.setLocation(0,0);
			lbl.setSize(myRect.getSize());
		}
	}


}
