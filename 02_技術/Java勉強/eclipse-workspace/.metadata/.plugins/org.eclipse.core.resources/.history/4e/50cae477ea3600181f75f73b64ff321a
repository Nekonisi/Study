import java.util.Scanner;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * @author nl_konishi
 *
 */
public class Step6 {



	/**
	 *  Step6のメインメソッド
	 *  自分自身をインスタンス化し、exec()メソッドを実行する。
	 *  @author nl_konishi
	 *  
	 */ 
	public static void main() {
		Step6 step6=new Step6();
		step6.exec();
	}

	/**
	 * Step6クラスの処理内容が記述されたメソッド
	 * S
	 */
	private void exec() {

	}

	// 最初のメッセージを表示
	ShowMessage(0);
	try {
		// ファイル読み込み用のクラスのインスタンス＆オブジェクトの生成
		// 読み込み対象ファイルは、D:\test.txtを指定している
		BufferedReader r = new BufferedReader(new InputStreamReader(
				new FileInputStream("D:\\test.txt"), "Shift-JIS"), 1);

		// ファイルより1行読み出す
		// もし、ファイルの最後まで読み出した場合、r.readLine()の戻り値はnullになる
		String line = r.readLine();

		// 文字列の内、6文字目から11文字目までを切り出す
		// 配列と同様に0から指定される点に注意
		System.out.println(line.substring(5, 10));

		// ファイルを開いた場合は必ず閉じる
		r.close();

		// 5000の整数を、日本円表記である\5,000として表示する
		System.out.println(String.format("\\%1$,9d", 5000));

	} catch (FileNotFoundException err) {
		// ファイルが存在しない場合、ここに制御が移る
		System.out.println("＊＊　ファイルオープンエラー！　＊＊");
	} catch (IOException err) {
		System.out.println("＊＊　メッセージ未設定　　＊＊");
	}


	// 結果表示

	// 入力値 String -> int
	int inputInt=Integer.parseInt(inputString);

	// 桁数を取得
	int digitLen=String.valueOf(inputInt).length();

	// 1文字目が-だったら桁数を一つ少なく
	if( inputCharArray[0]=='-'){
		digitLen--;
	}

	System.out.println("＊＊□数字チェック結果□＊＊");
	System.out.println("□ＡＬＬ ＮＵＭＢＥＲ！！\r\n");

	System.out.print("入力した文字列は" + inputInt);
	System.out.print("で桁数は" + digitLen + "です。\r\n");
}

/* メッセージを表示するだけ*/
private static void ShowMessage(int num){
	switch (num){
	case 0: // 最初のメッセージのやつ
		System.out.println("＊＊□商品レコード読込みプログラム□＊＊\r\n");
		break;

	case 1: // ファイルオープンエラー
		System.out.println("＊＊□ファイルオープンエラー！□＊＊\r\n");
		break;

	case 2: // 処理終了
		System.out.println("＊＊□入力した文字が不正です！□□＊＊\r\n");
		break;
	}
}

/* 入力文字列の桁数が10桁以上かどうかを判断するだけのクソメソッド*/
private static boolean checkDigit(char inputChar[]){
	// 最初の文字が"+" or "-" かどうか？
	if (inputChar[0]=='+' || inputChar[0]=='-'){
		// 最初の文字が+か-だった場合
		if (inputChar.length > 11){
			return false;
		} else {
			return true;
		}
	} else {
		if (inputChar.length > 10){
			return false;
		} else {
			return true;
		}
	}
}

/* 文字の種類をチェックする
		 仕様見る限り、半角数字だけOKにすればよくね？*/
private static boolean checkCharKind(char inputChar[]){

	// match関数で使用する正規表現のパターン
	String pattern="";
	for (int charCount = 0; charCount < inputChar.length; charCount++){
		if (charCount==0) {
			// 1文字目
			pattern="[-|+|0-9]";
		} else {
			// 1文字よりあと
			pattern="[0-9]";
		}
		if (String.valueOf(inputChar[charCount]).matches(pattern)) {
		} else {
			return false;
		}
	}
	return true;
}
}